---
- name: Set up Digital Ocean droplet with code-server and llm â€“ for saving as a snapshot
  hosts: localhost
  connection: local
  remote_user: root
  vars_files:
    - vars/main.yml
    - secrets.yml  # This file should be encrypted with ansible-vault

  tasks:

    - name: Check for existing droplet
      community.digitalocean.digital_ocean_droplet_info:
        oauth_token: "{{ do_api_key }}"
        name: "code-server-droplet-u22-base"
      register: existing_droplet
      failed_when: false

    - name: Set create flag
      set_fact:
        create_droplet: "{{ existing_droplet.data | default([]) | length == 0 }}"

    - name: show create flag
      debug:
        var: create_droplet

    - name: Create DigitalOcean Droplet
      community.digitalocean.digital_ocean_droplet:
        state: present
        name: "code-server-droplet-u22-base"
        region: "{{ do_region }}"
        size: "{{ do_size }}"
        image: "ubuntu-22-04-x64"
        ssh_keys: "{{ do_ssh_keys }}"
        oauth_token: "{{ do_api_key }}"
      when: create_droplet
      register: created_droplet

    - name: Display info from created set
      debug:
        var: created_droplet

    - name: Wait for network assignment and register droplet
      community.digitalocean.digital_ocean_droplet_info:
        oauth_token: "{{ do_api_key }}"
        name: "code-server-droplet-u22-base"
      register: droplet
      until: droplet.data[0].networks.v4 | length > 0
      retries: 30
      delay: 10

    - name: Display droplet information
      debug:
        var: droplet

    - name: Add new host to inventory
      add_host:
        name: "{{ droplet.data[0].networks.v4 | selectattr('type', 'equalto', 'public') | map(attribute='ip_address') | first }}"
        groups: new_droplets
        ansible_ssh_private_key_file: "{{ ssh_private_key_file }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ droplet.data[0].networks.v4 | selectattr('type', 'equalto', 'public') | map(attribute='ip_address') | first }}"
        port: 22
        delay: 10
        timeout: 320

- name: Configure new droplet
  hosts: new_droplets
  become: yes
  remote_user: root
  vars_files:
    - vars/main.yml

  tasks:

    - name: Wait for cloud-init to complete
      command: cloud-init status --wait
      changed_when: false

    - name: Check for running apt processes
      shell: ps aux | grep -i apt
      register: apt_check
      changed_when: false

    - name: Display apt processes
      debug:


        var: apt_check.stdout_lines

    - name: Wait for apt to finish
      wait_for:
        path: /var/lib/dpkg/lock-frontend
        state: absent

        timeout: 300
      register: lock_wait

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 0  # Force update

    - name: Upgrade all packages
      apt:
        upgrade: full
        force_apt_get: yes
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Remove unused packages
      apt:
        autoremove: yes

    - name: Install basic utilities
      apt:
        name: [curl, wget, git]
        state: present
        force_apt_get: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      vars:
        ansible_python_interpreter: auto_silent
      async: 300
      poll: 10

    - name: Install Python and pip
      apt:
        name: 
          - python3
          - python3-pip
        state: present
        force_apt_get: yes

    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: present
        update_cache: yes
      register: pip_install

    - name: Ensure pip is up-to-date
      pip:
        name: pip
        state: latest
      become: yes

    - name: Install additional Python packages
      apt:
        name:
          - python3-venv
          - virtualenv
          - python3-pytest
          - python3-pytest-cov
          - python3-coverage
        state: present
        force_apt_get: yes

    - name: Install Node.js
      apt:
        name: [nodejs]
        state: present
        force_apt_get: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      async: 300
      poll: 10

    - name: Install npm
      apt:
        name: [npm]
        state: present
        force_apt_get: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      async: 300
      poll: 10

    - name: Install nginx
      apt:
        name: nginx
        state: present
        force_apt_get: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      vars:
        ansible_python_interpreter: auto_silent
      async: 300
      poll: 10

    - name: Install code-server
      shell: curl -fsSL https://code-server.dev/install.sh | sh
      args:
        creates: /usr/bin/code-server
  
    - name: Install llm
      pip:
        name: llm
        state: present

    - name: Install global pip packages
      pip:
        name:
          - llm
          - pytest
          - coverage
        state: present

    - name: Configure Nginx
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/code-server
      notify: Reload Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/code-server
        dest: /etc/nginx/sites-enabled/code-server
        state: link
      notify: Reload Nginx

    - name: Verify system packages
      command: dpkg -l {{ item }}
      register: pkg_check
      changed_when: false
      loop:
        - curl
        - wget
        - git
        - python3
        - python3-pip
        - python3-venv
        - virtualenv
        - python3-pytest
        - nodejs
        - npm
        - nginx

    - name: Verify code-server installation
      command: which code-server
      register: code_server_check
      changed_when: false

    - name: Verify llm installation
      command: which llm
      register: llm_check
      changed_when: false

    - name: Display verification results
      debug:
        msg: "Package checks complete"
      when: 
        - pkg_check.results | map(attribute='rc') | list | unique == [0]
        - code_server_check.rc == 0 
        - llm_check.rc == 0

    - name: Clean apt cache
      apt:
        autoclean: yes

    - name: Clear logs
      shell: |
        find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;
        find /var/log -type f -name "*.gz" -delete
      changed_when: false

    - name: Clear bash history
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - ~/.bash_history
        - ~/.lesshst
        - ~/.history
        - ~/.wget-hsts
      changed_when: true

    - name: Create snapshot metadata file
      copy:
        content: |
          Snapshot created: {{ ansible_date_time.iso8601 }}
          Base image: ubuntu-22-04-x64
          Installed packages:
            - nginx
            - nodejs
            - npm
            - python3
            - code-server
            - llm
        dest: /etc/snapshot-info.txt

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

- name: make snapshot and remove droplet
  hosts: new_droplets
  become: yes
  remote_user: root
  vars_files:
    - vars/main.yml
    - secrets.yml

  tasks:
    - name: Get existing droplet information
      community.digitalocean.digital_ocean_droplet_info:
        oauth_token: "{{ do_api_key }}"
        name: "code-server-droplet-u22-base"
      register: droplet_info

    - name: Create snapshot of configured droplet
      community.digitalocean.digital_ocean_snapshot:
        oauth_token: "{{ do_api_key }}"
        droplet_id: "{{ droplet_info.data[0].id }}"
        snapshot_name: "code-server-droplet-u22-base-{{ ansible_date_time.date | replace('-', '') }}"
        wait: yes
        wait_timeout: 1800

    - name: Display snapshot information
      debug:
        msg: "Created snapshot {{ snapshot.data.name }} with ID {{ snapshot.data.id }}"
      when: snapshot is defined

    - name: Destroy the droplet after snapshot creation
      community.digitalocean.digital_ocean_droplet:
        state: absent
        name: "code-server-droplet-u22-base"
        droplet_id: "{{ droplet_info.data[0].id }}"
        oauth_token: "{{ do_api_key }}"
      when: cleanup_after_snapshot | default(true)


