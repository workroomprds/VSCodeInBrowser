---
## A playbook to create a droplet from a snapshot, and to set up the droplet with nginx, ssl, code-server and llm (should have been done in the source image), and set up users , code-server + llm for each user.

- name: Create or verify droplet
  hosts: localhost
  become: no
  vars_files:
    - secrets.yml  # This file should be encrypted with ansible-vault
    - vars/main.yml


  tasks:
    - name: Work with Digital Ocean to set up a new droplet from snapshot
      include_tasks: tasks/digital_ocean_work.yml

    - name: Wait for droplet to be ready (for SSH to come up)
      wait_for:
        host: "{{ droplet.data[0].networks.v4 | selectattr('type', 'equalto', 'public') | map(attribute='ip_address') | first }}"
        port: 22
        delay: 2
        timeout: 90
        connect_timeout: 3
        sleep: 1

    - name: Add new host to inventory
      add_host:
        name: "{{ droplet.data[0].networks.v4 | selectattr('type', 'equalto', 'public') | map(attribute='ip_address') | first }}"
        groups: new_droplets
        ansible_ssh_private_key_file: "{{ ssh_private_key_file }}"

- name: set up nginx, DNS and SSL
  hosts: new_droplets
  become: yes
  remote_user: root
  vars_files:
    - secrets.yml  # This file should be encrypted with ansible-vault
    - vars/main.yml
    - vars/users.yml
    - vars/cloudflare.yml
    - vars/ssl.yml

  tasks:
    - name: Install nginx if not already installed
      include_tasks: tasks/setup_nginx_base.yml

    - name: Check / set up Cloudflare DNS record
      include_tasks: tasks/cloudflare_work.yml

    - name: Check / set up Let's Encrypt certificate
      include_tasks: tasks/certificate_tasks.yml

    - name: Insall Ansible globally
      include_tasks: tasks/setup_ansible.yml

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded
   

- name: Configure users for code-server and set up tools
  hosts: new_droplets
  become: yes
  remote_user: root
  vars_files:
    - secrets.yml  # This file should be encrypted with ansible-vault
    - vars/main.yml
    - vars/users.yml
    - vars/cloudflare.yml
    - vars/ssl.yml

  tasks:

    - name: Double-check Ngnix install by forcing all notified handlers to run at this point
      meta: flush_handlers

    - name: Create user accounts and landing pages
      include_tasks: tasks/create_user_and_landing.yml

    - name: Configure Nginx for users
      include_tasks: tasks/setup_nginx_for_multiple_users.yml

    - name: Install code-server and set up for each user
      include_tasks: tasks/setup_code_server.yml

    - name: Install python and parts for each user
      include_tasks: tasks/setup_python.yml
  
    - name: set up LLM tool (and keys) for each user
      include_tasks: tasks/setup_llm_tool.yml

    - name: set up git and gitignore for each user
      include_tasks: tasks/setup_git.yml

    - name: Clone repo set permissions and commit - for each user
      include_tasks: tasks/clone_adjust_and_commit.yml

    ## After the repo is available, install Node.js and npm. Then install dependencies
    - name: install the repo's javascript dependencies
      include_tasks: tasks/setup_js_dependencies.yml

    - name: Create Python virtual environment for each Flask directory (from imported reqirements.txt)
      include_tasks: tasks/setup_flask.yml

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded
        
    - name: reload systemd
      systemd:
        daemon_reload: yes

- name: Import access information generation playbook
  import_playbook: generate_access_info.yml
